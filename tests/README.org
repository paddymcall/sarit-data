#+TITLE: Notes on the sarit-data/tests things


* Setting up the database for testing

#+BEGIN_SRC bash
  #!env /bin/bash
  EXISTDIR="/opt/lib/existdb-3.0rc1"
  EXISTCOLLECTION="/db/soup"
  # files to use, using relative paths
  EXISTFILE="saritcorpus.xml"
  EXISTCONFIG="../collection.xconf"
  $EXISTDIR/bin/client.sh -u admin -P admin --no-gui --rmcol $EXISTCOLLECTION \
      && \
      $EXISTDIR/bin/client.sh -u admin -P admin --no-gui --mkcol $EXISTCOLLECTION \
      && \
      $EXISTDIR/bin/client.sh -u admin -P admin --no-gui --rmcol "/db/system/config/"$EXISTCOLLECTION \
      && \
      $EXISTDIR/bin/client.sh -u admin -P admin --no-gui --mkcol "/db/system/config/"$EXISTCOLLECTION \
      && \
      $EXISTDIR/bin/client.sh --collection "/db/system/config/"$EXISTCOLLECTION -u admin -P admin \
                              --parse $EXISTCONFIG
      && \
      $EXISTDIR/bin/client.sh --collection $EXISTCOLLECTION -u admin -P admin \
                              --parse $EXISTFILE && \

      # on my laptop: parsed 104107439 bytes in 694576ms.
    
                            
#+END_SRC


* Some tests // experiments

- these suggest you use https://github.com/pashky/restclient.el


** see if rest api is alive

 #+BEGIN_SRC restclient
   GET http://localhost:8080/exist/rest/
   User-Agent: Emacs Restclient
 #+END_SRC


** get a file 

#+BEGIN_SRC restclient
  GET http://localhost:8080/exist/rest/sarit-data/master/avayavinirakarana.xml
#+END_SRC


** get the config

#+BEGIN_SRC restclient
  GET http://localhost:8080/exist/rest/db/system/config/db/sarit-data/collection.xconf
#+END_SRC



** simple search (not working, namespace issue?)

#+BEGIN_SRC restclient
  GET http://localhost:8080/exist/rest/sarit-data/master/avayavinirakarana.xml?_query=//p
#+END_SRC


** full text query (standard index)

#+BEGIN_SRC restclient
  POST http://localhost:8080/exist/rest/sarit-data/master/avayavinirakarana.xml
  Content-Type: application/xml

  <query xmlns="http://exist.sourceforge.net/NS/exist" xmlns:tei="http://www.tei-c.org/ns/1.0">
  <text>//tei:p[ft:query(., "तत्र")]</text>
  </query>
#+END_SRC


** full text query for slp1 index

#+BEGIN_SRC restclient
  POST http://localhost:8080/exist/rest/sarit-data/master/avayavinirakarana.xml
  Content-Type: application/xml

  <query xmlns="http://exist.sourceforge.net/NS/exist" xmlns:tei="http://www.tei-c.org/ns/1.0">
  <text>//tei:p[ft:query(., "tatra")]</text>
  </query>
#+END_SRC

** full text wildcard query no query-object

- see http://www.exist-db.org/exist/apps/doc/lucene.xml#D2.2.5

#+BEGIN_SRC restclient
  POST http://localhost:8080/exist/rest/sarit-data/master/avayavinirakarana.xml
  Content-Type: application/xml

  <query xmlns="http://exist.sourceforge.net/NS/exist" xmlns:tei="http://www.tei-c.org/ns/1.0">
  <text>//tei:p[ft:query(., "nam* AND lok*")]</text>
  </query>
#+END_SRC

** full text leading wildcard query (no query-object) + options

- see http://www.exist-db.org/exist/apps/doc/lucene.xml#D2.2.5, and
- http://www.exist-db.org/exist/apps/doc/lucene.xml#D2.2.5.10 for options

#+BEGIN_SRC restclient
  POST http://localhost:8080/exist/rest/sarit-data/master/avayavinirakarana.xml
  Content-Type: application/xml

  <query xmlns="http://exist.sourceforge.net/NS/exist" xmlns:tei="http://www.tei-c.org/ns/1.0">
  <text>
  <![CDATA[
          
                    xquery version "3.1";
                    declare namespace tei="http://www.tei-c.org/ns/1.0";
                    let $options := <options>
                            <default-operator>and</default-operator>
                            <phrase-slop>1</phrase-slop>
                            <leading-wildcard>yes</leading-wildcard>
                            <filter-rewrite>yes</filter-rewrite>
              </options>            
                    let $query := "*ntar* AND *tatr*"
                    for $hit in //tei:p[ft:query(., $query, $options)]
                    order by ft:score($hit)
                    return $hit
          
    ]]>
    </text>
  </query>
#+END_SRC


** TODO full text wildcard + diacritics

- no results here :-(

#+BEGIN_SRC restclient
  POST http://localhost:8080/exist/rest/sarit-data/master/avayavinirakarana.xml
  Content-Type: application/xml

  <query xmlns="http://exist.sourceforge.net/NS/exist" xmlns:tei="http://www.tei-c.org/ns/1.0">
  <text>
  <![CDATA[
          
                    xquery version "3.1";
                    declare namespace tei="http://www.tei-c.org/ns/1.0";
                    let $query := "sTUlo"
                    for $hit in //tei:p[ft:query(., $query)]
                    order by ft:score($hit)
                    return $hit
          
    ]]>
    </text>
  </query>

#+END_SRC

** full text wildcard query with query object

- see http://www.exist-db.org/exist/apps/doc/lucene.xml#D2.2.5.9
- if the "string version" works, there's no need for this object (it's
  complicated because it requires that user input is parsed).

#+BEGIN_SRC restclient
  POST http://localhost:8080/exist/rest/sarit-data/master/avayavinirakarana.xml
  Content-Type: application/xml

  <query xmlns="http://exist.sourceforge.net/NS/exist">
  <text><![CDATA[
                
                  xquery version "3.1";
                  declare namespace tei="http://www.tei-c.org/ns/1.0";
                  let $query := <query xmlns="http://exist.sourceforge.net/NS/exist"><bool><wildcard>*atr*</wildcard></bool></query>
                  return count(//tei:p[ft:query(., $query)])
                
  ]]></text>       
  </query>
#+END_SRC




** boolean query

#+BEGIN_SRC restclient
  POST http://localhost:8080/exist/rest/sarit-data/master
  Content-Type: application/xml

  <query xmlns="http://exist.sourceforge.net/NS/exist" start="21" max="20">
  <text><![CDATA[
            
                  xquery version "3.1";
                  declare namespace tei="http://www.tei-c.org/ns/1.0";
                  let $query := <query xmlns="http://exist.sourceforge.net/NS/exist"><bool><term occur="must">yatra</term><wildcard occur="must">tatra</wildcard></bool></query>
                  for $hit in //tei:p[ft:query(., $query)]
                  order by ft:score($hit)
                  return $hit
            
  ]]></text>       
  </query>
#+END_SRC
